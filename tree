import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import MinMaxScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.pipeline import Pipeline
from sklearn.model_selection import GridSearchCV, cross_val_score

def pipeline_score(X, y):
    """
    Constructs and evaluates a pipeline using SimpleImputer, MinMaxScaler, 
    and DecisionTreeClassifier with grid search for hyperparameter tuning.

    Parameters:
        X (numpy.ndarray): Feature matrix.
        y (numpy.ndarray): Target vector.

    Returns:
        scores (numpy.ndarray): Cross-validation scores for the best pipeline.
    """
    # Define the pipeline
    pipeline = Pipeline([
        ('imputer', SimpleImputer()),  # Handles missing values
        ('scaler', MinMaxScaler()),   # Scales features to [0, 1]
        ('classifier', DecisionTreeClassifier(random_state=802))  # Decision tree classifier
    ])

    # Define the parameter grid for grid search
    param_grid = {
        'imputer__strategy': ['mean', 'median'],          # Imputation strategies
        'classifier__max_depth': [1, 2, 5, 10]           # Decision tree max depths
    }

    # Use GridSearchCV for hyperparameter optimization
    grid_search = GridSearchCV(pipeline, param_grid, cv=4, verbose=2, n_jobs=-1)
    grid_search.fit(X, y)

    # Evaluate the pipeline's performance using cross-validation
    scores = cross_val_score(grid_search.best_estimator_, X, y, cv=4)
    
    print("Best parameters found:", grid_search.best_params_)
    print("Cross-validation scores:", np.round(scores, 4))
    
    return scores

# Example usage
if __name__ == "__main__":
    # Example data
    X = np.array([
        [0.5, -0.1], [0.8, 0.3], [0.1, 0.8], [np.nan, 0.4], 
        [1.2, 1.1], [1.1, 0.7], [1.5, np.nan], [0.3, 0.3]
    ])
    y = np.array([1, 1, 0, 0, 1, 1, 0, 0])

    # Calculate scores
    scores = pipeline_score(X, y)
