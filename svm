from sklearn import datasets
from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC
import numpy as np

def grid_search_svm(X, y):
    """
    Function to train an SVM model using grid search for hyperparameter tuning.
    
    Parameters:
        X (numpy.ndarray): Feature matrix.
        y (numpy.ndarray): Target vector.
    
    Returns:
        best_model: Trained SVM model with the best hyperparameters.
    """
    # Define the parameter grid for C and gamma
    param_grid = {
        'C': [0.1, 1, 10, 100, 1000],
        'gamma': [0.001, 0.01, 0.1, 1],
        'kernel': ['rbf']
    }

    # Create an SVC model
    svm = SVC()

    # Create the GridSearchCV object
    grid_search = GridSearchCV(estimator=svm, param_grid=param_grid, cv=5, verbose=2, n_jobs=-1)

    # Perform the grid search
    grid_search.fit(X, y)

    # Print the best parameters and the corresponding score
    print("Best parameters found:", grid_search.best_params_)

    # Return the best model
    return grid_search.best_estimator_

# Example usage
if __name__ == "__main__":
    # Load a dataset (Iris dataset)
    data = datasets.load_iris()
    X = data.data
    y = data.target

    # Call the function and get the best model
    best_model = grid_search_svm(X, y)
    
    # Example prediction
    test_data = np.array([[5.1, 3.5, 1.4, 0.2], [6.5, 3.0, 5.2, 2.0]])
    predictions = best_model.predict(test_data)
    print("Predictions for test data:", predictions)
